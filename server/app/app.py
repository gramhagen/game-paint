import json
from pathlib import Path
from uuid import uuid4

import uvicorn
from fastapi import FastAPI
from fastapi.responses import Response

from model.vqgan_clip import load_model, load_perceptor, generate


IMAGE_PATH = Path("/images")

app = FastAPI()
model = load_model()
perceptor = load_perceptor()


@app.get("/")
def status():
    return "Server is up!"


@app.get("/predict",
    responses = {
        200: {
            "content": {"application/json": {}}
        }
    },
)
async def predict(input_text: str):
    """ Return image id for model output """
    image_id = uuid4()
    image_dir = IMAGE_PATH.joinpath(image_id)
    image_dir.mkdir()
    image_path = image_dir.joinpath("1.png")
    generate(
        model=model,
        perceptor=perceptor,
        output_path=image_path.as_posix(),
        prompts=f"{input_text}|unreal engine",
    )
    return Response(content=image_id, media_type="application/json")


@app.get("/retrieve",
    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    responses = {
        200: {
            "content": {"image/png": {}}
        }
    },
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
)
async def retrieve(image_id: str):
    """ Return generated image from the model """
    image_byte_array = io.BytesIO()
    image = Image.open(IMAGE_PATH.joinpath(image_id, "1.png"))
    image.save(image_byte_array, format=image.format)
    return Response(content=image_byte_array.getvalue(), media_type="image/png")


if __name__ == '__main__':
    uvicorn.run(app, host='0.0.0.0', port=8000)